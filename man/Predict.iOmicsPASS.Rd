% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Main.R
\name{Predict.iOmicsPASS}
\alias{Predict.iOmicsPASS}
\title{Classification on external dataset}
\usage{
Predict.iOmicsPASS(
  file,
  newData,
  standardize = TRUE,
  usePrior = FALSE,
  prior = NULL,
  prop = 0.8
)
}
\arguments{
\item{file}{output from running iOmicsPASS.R().}

\item{newData}{Test data where the various -omics data are concatenated over the same samples. First column should be the list of features to be matched to the predictive signatures.}

\item{standardize}{whether to perform standardization on the data.}

\item{usePrior}{boolean.}

\item{prior}{filename of prior.}

\item{prop}{proportion of features in test data that are part of the predictive signature. (default=0.8)}
}
\value{
a dataframe with the class probabilities for each sample
}
\description{
Classification on external dataset
}
\examples{

data(Tulip_Protein)
data(Tulip_microRNA)
data(PhenotypeFile)
data(PPI_network)
data(TargetScan_network)

row.names(Tulip_Protein) = Tulip_Protein$Protein
row.names(Tulip_microRNA) = Tulip_microRNA$miRNA


## create a testData by randomly sampling from original data ##
set.seed(22)
sample_pick = sample(PhenotypeFile$TulipID, 6)   ## 4 LIS and 2 OIR

Tulip_Protein_test = Tulip_Protein[,c(1,match(sample_pick, colnames(Tulip_Protein)))]
Tulip_microRNA_test = Tulip_microRNA[,c(1,match(sample_pick, colnames(Tulip_microRNA)))]

PhenotypeFile_test = PhenotypeFile[which(PhenotypeFile$TulipID \%in\% sample_pick),]

row.names(PhenotypeFile_test) = PhenotypeFile_test$TulipID
row.names(PhenotypeFile) = PhenotypeFile$TulipID

prior_train = createPrior(PhenotypeFile[,-1], y = "Group",predict=FALSE)

createInputParam(data.X=Tulip_Protein, data.Y=Tulip_microRNA, within.net=PPI_network,
 btw.net=TargetScan_network,log.transform=TRUE,phenotype =PhenotypeFile,
 Enrichment=FALSE,usePrior = TRUE, priorfile = prior_train, tag="train")

iOmicsPASS.train <- iOmicsPASS.R(ff = "input_param_train")

createInputParam(data.X=Tulip_Protein, data.Y=Tulip_microRNA, within.net=PPI_network,
 btw.net=TargetScan_network,log.transform=TRUE,phenotype =PhenotypeFile,Cross.Validate=FALSE,
 min.thres=1.8,Enrichment=FALSE,usePrior = TRUE, priorfile = prior_train, tag="train")
 iOmicsPASS.train <- iOmicsPASS.R(ff = "input_param_train", plotCV=FALSE)

 ## predict test data using signatures from training data ##
testData=rbind(Tulip_Protein_test[,-1],Tulip_microRNA_test[,-1])
testData=log2(testData)
testData = data.frame(row.names(testData), testData, check.names=FALSE)
colnames(testData)[1] = "Feature"

 ## remove group information ##
PhenotypeFile_test=PhenotypeFile_test[,-2]
prior_test = createPrior(PhenotypeFile[,-1], y = "Group",predict=TRUE,
testFile = PhenotypeFile_test[,-1])
pred.out <- Predict.iOmicsPASS(iOmicsPASS.train , testData, standardize = TRUE,prop = 0.9,
 usePrior=T,prior=prior_test )

}
